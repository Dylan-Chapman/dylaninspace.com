---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import type { GetStaticPaths } from "astro";
import {
  createSeriesInfoGetter,
  loadSeriesCollections,
} from "../../../../utils/post";
import { makeSeries } from "../../../../utils/series";
import { idToPath } from "../../../../utils/content";

import Base from "../../../../layouts/Base.astro";
import EntryCard from "../../../../components/general/EntryCard.astro";

export const getStaticPaths = (async () => {
  const metas = await getCollection("seriesMeta");
  return metas.map((e) => {
    const path = idToPath(e);
    const series = path.split("/")[0];
    if (!series) {
      throw new Error(`Unable to extract series key from ${e.id}`);
    }
    return { params: { series } };
  });
}) satisfies GetStaticPaths;

const seriesParam = Astro.params.series;
if (!seriesParam) {
  throw new Error('Missing required route param: "series"');
}
const series = seriesParam;

const { allSeriesPosts, allSeriesMeta } = await loadSeriesCollections();
const seriesUtils = makeSeries(allSeriesPosts, allSeriesMeta);
const list = seriesUtils.list(series);
if (!list) {
  throw new Error(`Series not found: ${series}`);
}

const entryMapBySlug = new Map<string, CollectionEntry<"seriesPosts">>();
for (const entry of allSeriesPosts) {
  if (entry.id.startsWith(`${series}/`)) {
    const path = idToPath(entry);
    const partSlug = path.split("/").pop();
    if (partSlug) {
      entryMapBySlug.set(partSlug.toLowerCase(), entry);
    }
  }
}

const entries = (list.parts ?? [])
  .filter((p) => p.published)
  .map((p) => entryMapBySlug.get(p.slug.toLowerCase()))
  .filter((e): e is CollectionEntry<"seriesPosts"> => Boolean(e));

const getSeriesInfo = createSeriesInfoGetter(allSeriesPosts, allSeriesMeta);
---

<Base>
  <section class="container mx-auto max-w-screen-lg px-7 py-10">
    <div class="prose lg:prose-xl dark:prose-invert">
      <h1 class="mb-2">{list.title}</h1>
      {list.description && <p>{list.description}</p>}
      <p class="mt-0 text-sm opacity-70">
        {list.published} of {list.planned} parts published ({
          list.planned - list.published
        } upcoming)
      </p>
      {
        entries.map((entry) => (
          <EntryCard
            entry={entry}
            seriesInfo={getSeriesInfo(entry)}
            hideSeriesInfo
          />
        ))
      }
    </div>
  </section>
</Base>