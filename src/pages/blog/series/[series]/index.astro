---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import type { GetStaticPaths } from "astro";
import {
  createSeriesInfoGetter,
  loadSeriesCollections,
} from "../../../../utils/post";
import { makeSeries } from "../../../../utils/series";
import { formatSeriesProgressSummary } from "../../../../utils/seriesCopy";
import { idToPath } from "../../../../utils/content";

import Base from "../../../../layouts/Base.astro";
import BlogEntryCard from "../../../../components/general/BlogEntryCard.astro";
import Chip from "../../../../components/general/Chip.astro";
import Breadcrumbs from "../../../../components/general/Breadcrumbs.astro";

export const getStaticPaths = (async () => {
  const metas = await getCollection("seriesMeta");
  return metas.map((e) => {
    const path = idToPath(e);
    const series = path.split("/")[0];
    if (!series) {
      throw new Error(`Unable to extract series key from ${e.id}`);
    }
    return { params: { series } };
  });
}) satisfies GetStaticPaths;

const seriesParam = Astro.params.series;
if (!seriesParam) {
  throw new Error('Missing required route param: "series"');
}
const series = seriesParam;

const { allSeriesPosts, allSeriesMeta } = await loadSeriesCollections();
const seriesUtils = makeSeries(allSeriesPosts, allSeriesMeta);
const list = seriesUtils.list(series);
if (!list) {
  throw new Error(`Series not found: ${series}`);
}

const entryMapBySlug = new Map<string, CollectionEntry<"seriesPosts">>();
for (const entry of allSeriesPosts) {
  if (entry.id.startsWith(`${series}/`)) {
    const path = idToPath(entry);
    const partSlug = path.split("/").pop();
    if (partSlug) {
      entryMapBySlug.set(partSlug.toLowerCase(), entry);
    }
  }
}

const entries = (list.parts ?? [])
  .filter((p) => p.published)
  .map((p) => entryMapBySlug.get(p.slug.toLowerCase()))
  .filter((e): e is CollectionEntry<"seriesPosts"> => Boolean(e));

const hasEntries = entries.length > 0;
const formatPartNumber = (index: number) => String(index + 1).padStart(2, "0");
const getSeriesInfo = createSeriesInfoGetter(allSeriesPosts, allSeriesMeta);
const breadcrumbs = [
  { label: "Home", href: "/" },
  { label: "Blog", href: "/blog/" },
  { label: "Series", href: "/blog/series/" },
  { label: list.title },
];
---

<Base>
  <section
    class="container mx-auto max-w-screen-lg px-7 py-10 border-l-1 border-"
  >
    <div
      class="series-stack mx-auto max-w-4xl rounded-3xl bg-cosmos-dark/40 px-6 py-8 ring-1 ring-white/10 lg:px-12 lg:py-12"
    >
      <Breadcrumbs items={breadcrumbs} class="mb-6" />
      <header class="space-y-6">
        <Chip size="sm" class="self-start">
          {formatSeriesProgressSummary(list)}
        </Chip>
        <div class="prose prose-invert lg:prose-xl max-w-none">
          <h1 class="mb-4 leading-tight lg:mb-6">{list.title}</h1>
          {list.description && <p>{list.description}</p>}
        </div>
      </header>

      {
        hasEntries && (
          <p class="series-stack__bridge mt-14 text-xs font-semibold uppercase tracking-[0.35em] text-white/60">
            Explore the chapters below:
          </p>
        )
      }

      <div
        class:list={[
          "series-stack__list",
          "mt-12",
          "flex",
          "flex-col",
          "gap-10",
        ]}
      >
        {
          entries.map((entry, index) => (
            <BlogEntryCard
              entry={entry}
              seriesInfo={getSeriesInfo(entry)}
              hideSeriesInfo
              partLabel={`Part ${formatPartNumber(index)}`}
            />
          ))
        }
      </div>
    </div>
  </section>
</Base>

