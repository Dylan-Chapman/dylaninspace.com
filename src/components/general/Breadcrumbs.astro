---
type BreadcrumbItem = {
  label: string;
  href?: string | null;
};

type Props = {
  items?: BreadcrumbItem[];
  class?: string;
};

const { items = [], class: className } = Astro.props as Props;
const crumbs = items.filter((item): item is BreadcrumbItem =>
  Boolean(item?.label && item.label.trim())
);
---
{crumbs.length > 0 && (
  <nav aria-label="Breadcrumb" class:list={["breadcrumbs", className]}>
    <ol class="flex flex-wrap items-center gap-2 text-sm text-cosmos-white/70">
      {crumbs.map((item, index) => {
        const isLast = index === crumbs.length - 1;
        const showLink = Boolean(item.href && !isLast);
        const href = item.href ?? undefined;
        return (
          <li class="flex items-center gap-2 max-w-full">
            {index > 0 && <span class="text-cosmos-white/30">/</span>}
            {showLink ? (
              <a
                href={href}
                class="max-w-full truncate transition-colors duration-150 hover:text-cosmos-white"
                title={item.label}
              >
                {item.label}
              </a>
            ) : (
              <span
                class:list={[
                  "max-w-full truncate",
                  isLast ? "text-cosmos-white" : "text-cosmos-white/70",
                ]}
                aria-current={isLast ? "page" : undefined}
                title={item.label}
              >
                {item.label}
              </span>
            )}
          </li>
        );
      })}
    </ol>
  </nav>
)}