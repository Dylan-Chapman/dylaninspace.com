---
import config from "../../config.mjs";
import type { ImageMetadata } from "astro";

type OGType =
  | "website"
  | "article"
  | "profile"
  | "book"
  | "music.song"
  | "music.album"
  | "video.movie"
  | (string & {}); // Allow custom types

interface Frontmatter {
  title?: string;
  description?: string;
  image?: ImageMetadata | string; // Frontmatter asset or plain URL
  type?: OGType;
}

interface Props {
  postData?: { data?: Frontmatter };
}

const { postData } = Astro.props as Props;

const title =
  (postData?.data?.title ?? config.title) + (config.titleSuffix ?? "");

const description = postData?.data?.description ?? config.description;

// Already absolute:
const permalink = Astro.url;

// Normalize image to a string URL
const rawImage = postData?.data?.image ?? config.defaultOgImage;
const image = typeof rawImage === "string" ? rawImage : rawImage.src;

const type: OGType = postData?.data?.type ?? "website";
---

<title>{title}</title>
<meta name="title" content={title} />
{description && <meta name="description" content={description} />}

<!-- Open Graph -->
<meta property="og:type" content={type} />
<meta property="og:title" content={title} />
<meta property="og:url" content={permalink.toString()} />
{description && <meta property="og:description" content={description} />}
<meta property="og:image" content={new URL(image, Astro.url).toString()} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:title" content={title} />
<meta property="twitter:url" content={permalink.toString()} />
{description && <meta property="twitter:description" content={description} />}
<meta property="twitter:image" content={new URL(image, Astro.url).toString()} />
