---
interface Props {
  href: string;
  title: string;
  class?: string;
}

const { href, title, class: className = "" } = Astro.props as Props;
const hasImageSlot = Astro.slots.has("image");
const hasChipsSlot = Astro.slots.has("chips");
const hasTitleSlot = Astro.slots.has("title");
const hasMetaSlot = Astro.slots.has("meta");
const hasBodySlot = Astro.slots.has("default");

const containerClasses = [
  "entry-card",
  "not-prose",
  "mb-16",
  "last:mb-0",
  className,
];

const innerClasses = [
  "entry-card__inner",
  "grid",
  "grid-cols-1",
  "gap-10",
  hasImageSlot ? "md:grid-cols-[220px_auto]" : "",
  hasImageSlot ? "lg:grid-cols-[240px_auto]" : "",
  "items-start",
];

const chipsWrapperClasses = [
  "entry-card__chips",
  "flex",
  "flex-wrap",
  "items-center",
  "gap-2",
];

const mediaWrapperClasses = [
  "entry-card__media",
  "relative",
  "w-full",
  "max-w-[260px]",
  "min-h-[200px]",
  "flex",
  "items-center",
  "justify-center",
];
---

<article class:list={containerClasses.filter(Boolean)}>
  <div class:list={innerClasses.filter(Boolean)}>
    {
      hasImageSlot && (
        <div class:list={mediaWrapperClasses.filter(Boolean)}>
          <slot name="image" />
        </div>
      )
    }
    <div
      class="post_intro flex flex-col gap-3 text-base lg:text-lg text-cosmos-white/85"
    >
      {
        hasChipsSlot && (
          <div class:list={chipsWrapperClasses}>
            <slot name="chips" />
          </div>
        )
      }
      <h2 class="text-3xl font-cosmos-space font-bold leading-tight">
        {
          hasTitleSlot ? (
            <slot name="title" />
          ) : (
            <a
              href={href}
              class="inline-flex text-current transition-colors hover:text-cosmos-accent focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-cosmos-accent"
            >
              {title}
            </a>
          )
        }
      </h2>
      {
        hasMetaSlot && (
          <div class="entry-card__meta flex flex-col gap-2">
            <slot name="meta" />
          </div>
        )
      }
      {hasBodySlot && <slot />}
    </div>
  </div>
</article>
